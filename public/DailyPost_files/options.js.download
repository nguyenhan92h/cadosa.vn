(function ($) {
	'use strict';

	var teslaThemes = {

		init: function () {
			this.checkInputsForValue();
			this.toggles();
            this.magnificPopupInit();
            this.weatherAPI();
			this.autoCompleteSearch();
            this.postShare();
            this.contactMap();
            this.mediumEditorInit();
            this.postProgress();
            this.slickInit();
            this.marqueeInit();
            this.theiaInit();
		},

		// Theme Custom Functions
		checkInputsForValue: function () {
			$(document).on('focusout', '.check-value', function () {
				var text_val = $(this).val();
				if (text_val === "" || text_val.replace(/^\s+|\s+$/g, '') === "") {
					$(this).removeClass('has-value');
				} else {
					$(this).addClass('has-value');
				}
			});
		},

        openCommentsArea: function (elem, option) {
            var commentsAreaToggle = elem.find('.comments-area-toggle'),
                commentsAreaBody = elem.find('.comments-area-wrapper');

            if (option === 'click') {
                commentsAreaToggle.on('click', function () {
                    commentsAreaBody.velocity('slideDown', {duration: 600});
                    setTimeout(function () {
                        commentsAreaBody.addClass('open');
                    }, 500);
                    commentsAreaToggle.addClass('not-visible');
                });
            } else if (option === 'auto') {
                commentsAreaBody.velocity('slideDown', {duration: 600});
                setTimeout(function () {
                    commentsAreaBody.addClass('open');
                }, 500);
                commentsAreaToggle.addClass('not-visible');
            }
        },

		toggles: function () {
			// Search form toggle
			$('.search-panel-toggle').on('click', function () {
				$('body').addClass('search-panel-visible');
			});

			$('.search-panel .search-panel-close').on('click', function () {
				$('body').removeClass('search-panel-visible');
			});

            // Side menu 
            var menuToggle = $('.side-menu-toggle');

            menuToggle.on('click', function () {
                $('body').toggleClass('side-menu-open');
                return false;
            });

            $(document).on('click', function () {
                $('body').hasClass('side-menu-open') ? $('body').removeClass('side-menu-open') : "";
            });

            $('#side-menu').on('click', function (e) {
                e.stopPropagation();
            });

            // Side menu dropdown
            var menuDropdown = $('#side-menu .page-main-links .has-children');

            menuDropdown.each(function () {
                var obj = $(this),
                    dropdown = obj.find('.dropdown');

                obj.find('a').first().on('click', function (e) {
                    e.preventDefault();
                    dropdown.toggleClass('open');
                    $(this).toggleClass('expanded');
                    dropdown.hasClass('open') ? dropdown.velocity('slideDown', {duration: 200}) : dropdown.velocity('slideUp', {duration: 175});
                });
            });
		},

        magnificPopupInit: function () {
            var startWindowScroll = 0;

            $('.big-image a').magnificPopup({
                type: 'image',
                mainClass: 'mfp-with-zoom',
                closeOnContentClick: true,
                zoom: {
                    enabled: true,
                    duration: 300,
                    easing: 'ease-in-out',
                    opener: function(openerElement) {
                        return openerElement.is('img') ? openerElement : openerElement.find('img');
                    }
                }
            });
        },

        weatherAPI: function () {
            var lat, lon, city, country, weatherUnits = "metric";

            var icon = $('[data-weather-icon]'),
                weatherIcons;  

            // Get user position 
            function getGeoLocation () {
                city = geoplugin_city();
                country = geoplugin_countryCode();
                lat = geoplugin_latitude();
                lon = geoplugin_longitude();
            };

            if ($('.weather-block').data('weather-type') == "daily") {

                setTimeout(function () {
                    loadWeather("daily");
                }, 200);
                getGeoLocation();
            } else if ($('.weather-block').data('weather-type') == "hourly") {
                setTimeout(function () {
                    loadWeather("hourly");
                }, 200);
                getGeoLocation();
            }

            // Load Icons
            if (icon.length) {
                $.ajax({
                    url: 'ajax/weather-icons.svg',
                    success: function(data) {
                        weatherIcons = data;
                    },
                    error: function (x,y, z) {
                        console.log(x,y, z);
                    }
                });
            }

            var mainWeatherBlock = {
                'container': $('.main-weather-block, .small-weather-block'),
                'currentUnitType' : $('.main-weather-block .block-header .measurements .select-group'),
                'unitSelector' : $('.main-weather-block .block-header .measurements input, .weather-header-form .select-option input'),
                'currentDay': $('.main-weather-block .today-meta .day span'),
                'todayDay': $('.main-weather-block .today-temperature li[data-half-type="day"] .degrees'),
                'todayNight': $('.main-weather-block .today-temperature li[data-half-type="night"] .degrees'),
                'todayExtended': $('.main-weather-block .today-temperature li[data-half-type="all-day"]'),
                'todaySunrise': $('.main-weather-block .today-meta .sun-activity li[data-sun-activity="sunrise"]'),
                'todaySunset': $('.main-weather-block .today-meta .sun-activity li[data-sun-activity="sunset"]'),
                'todayShortMetaHumidity': $('.main-weather-block .short-meta li[data-short-meta="humidity"] .result'),
                'todayShortMetaVisibility': $('.main-weather-block .short-meta li[data-short-meta="visibility"] .result'),
                'todayShortMetaPresure': $('.main-weather-block .short-meta li[data-short-meta="presure"] .result'),
                'weeklyWeatherMeta': $('.weather-block .weekly-info-block .week-temperatures li'),
                'temperatureAtTheMoment': $('.weather-block .current-time-weather'),
                'currentWeatherCurrentLocation': $('.weather-block .block-header .location'),
                'weeklyWeatherBlocks': $('.small-weather-block')
            };

            // Load weather
            function loadWeather (type) {
                var weeklyWeatherResults;
                var currentWeatherResults;
                var hourlyWeatherResults;

                // Displaying current weekday
                var weekDays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"];
                var allMonths = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

                var d = new Date();
                var n = d.getDay();
                mainWeatherBlock.currentDay.html(weekDays[n - 1]);

                // Define weather icon based on API results
                function defineIcon (input) {
                    var res;

                    switch (input) {
                        case '01d':
                        case '01n':
                            res = 'sun';
                            break;

                        case '02d':
                        case '02n':
                            res = 'cloudSun';
                            break;

                        case '03d':
                        case '03n':
                        case '04d':
                        case '04n':
                            res = 'cloud';
                            break;

                        case '09d':
                        case '09n':
                            res = 'cloudDrizzleAlt';
                            break;

                        case '10d':
                        case '10n':
                            res = 'cloudDrizzleSunAlt';
                            break;

                        case '11d':
                        case '11n':
                            res = 'cloudLightning';
                            break;

                        case '13d':
                        case '13n':
                            res = 'cloudSnowAlt';
                            break;

                        case '50d':
                        case '50n':
                            res = 'cloudFog';
                            break;

                        default:
                            res = 'cloudSun';
                    }

                    return '<svg version="1.1" viewBox="15 15 70 70">' + $(weatherIcons).find('#' + res).html() + '</svg>'
                }

                // Weekly weather results
                $.ajax({
                    url: 'http://api.openweathermap.org/data/2.5/forecast/daily?lat=' + lat + '&lon=' + lon + '&APPID=af60c4fdd1bca77a3d2b036828c809a9&units=' + weatherUnits + '&cnt=8',
                    dataType: 'json',
                    success: function (result) {
                        weeklyWeatherResults = result;

                        // Display the Weekly temperatures in Main Weather Block
                        displayWeeklyWeather();
                    },
                    error: function (xhr, status, error) {
                        console.log(xhr, status, error);
                    }
                });

                // Current weather results
                $.ajax({
                    url: 'http://api.openweathermap.org/data/2.5/weather?lat=' + lat + '&lon=' + lon + '&APPID=af60c4fdd1bca77a3d2b036828c809a9&units=' + weatherUnits,
                    dataType: 'json',
                    success: function (result) {
                        currentWeatherResults = result;

                        displayCurrentWeather();
                    },
                    error: function (xhr, status, error) {
                        console.log(xhr, status, error);
                    }
                });

                // Hourly weather results

                if (type === "hourly") {
                    $.ajax({
                        url: 'http://api.openweathermap.org/data/2.5/forecast?lat=' + lat + '&lon=' + lon + '&APPID=af60c4fdd1bca77a3d2b036828c809a9&units='+ weatherUnits + '&cnt=6',
                        dataType: 'json',
                        success: function (result) {
                            hourlyWeatherResults = result;

                            displayHourlyWeather();
                        },
                        error: function (xhr, status, error) {
                            console.log(xhr, status, error);
                        }
                    });
                }

                function displayWeeklyWeather () {
                    if (type === "daily") {
                        // Displaying today temperatures
                        mainWeatherBlock.todayDay.html(Math.round(weeklyWeatherResults.list[0].temp.day));
                        mainWeatherBlock.todayNight.html(Math.round(weeklyWeatherResults.list[0].temp.night));

                        for (var i = 1; i <= 6; i ++) {
                            var dayCounter;
                            
                            if (n - 1 + i < 7) {
                                dayCounter = n - 1 + i;
                            } else {
                                dayCounter = (n - 1 + i) - 7;
                            }

                            mainWeatherBlock.weeklyWeatherMeta.eq(i - 1).find('.day').html(weekDays[dayCounter].substring(0,3));
                            mainWeatherBlock.weeklyWeatherMeta.eq(i - 1).find('.degrees').html(Math.round(weeklyWeatherResults.list[i].temp.max));
                            mainWeatherBlock.weeklyWeatherMeta.eq(i - 1).find('.icon').html(defineIcon(weeklyWeatherResults.list[i].weather[0].icon));
                        }
                    } else if (type === "hourly") {
                        for (var i = 1; i <= 6; i ++) {
                            var date = new Date(weeklyWeatherResults.list[i].dt * 1000),
                                date = date.getDate() + " " + allMonths[date.getMonth()].substring(0, 3),
                                dayCounter;

                            if (n - 1 + i < 7) {
                                dayCounter = n - 1 + i;
                            } else {
                                dayCounter = (n - 1 + i) - 7;
                            }

                            mainWeatherBlock.weeklyWeatherBlocks.eq(i - 1).find('.day .day-text').html(weekDays[dayCounter].substring(0, 3));
                            mainWeatherBlock.weeklyWeatherBlocks.eq(i - 1).find('.day .date').html(date);
                            mainWeatherBlock.weeklyWeatherBlocks.eq(i - 1).find('.temperature-icon').html(defineIcon(weeklyWeatherResults.list[i].weather[0].icon));
                            mainWeatherBlock.weeklyWeatherBlocks.eq(i - 1).find('.temperature .max').html(Math.round(weeklyWeatherResults.list[i].temp.max));
                            mainWeatherBlock.weeklyWeatherBlocks.eq(i - 1).find('.temperature .min').html(Math.round(weeklyWeatherResults.list[i].temp.min));
                        }
                    }
                }

                function displayCurrentWeather () {
                    var sunSet = new Date (currentWeatherResults.sys.sunset * 1000);
                        sunSet = sunSet.toLocaleTimeString(navigator.language, { hour12: false, hour: '2-digit', minute:'2-digit'});
                    var sunRise = new Date (currentWeatherResults.sys.sunrise * 1000);
                        sunRise = sunRise.toLocaleTimeString(navigator.language, { hour12: false, hour: '2-digit', minute:'2-digit'})

                    // Displaying sunset/sunrise
                    mainWeatherBlock.todaySunrise.html(sunRise);
                    mainWeatherBlock.todaySunset.html(sunSet);

                    // Displaying shortmeta
                    var currentVisibility;

                    if (currentWeatherResults.visibility <= 20) {
                        currentVisibility = "Dense fog";
                    } else if (currentWeatherResults.visibility <= 100) {
                        currentVisibility = "Thick fog";
                    } else if (currentWeatherResults.visibility > 100 && currentWeatherResults.visibility <= 200) {
                        currentVisibility = "Fog";
                    } else if (currentWeatherResults.visibility > 200 && currentWeatherResults.visibility <= 400) {
                        currentVisibility = "Moderate fog";
                    } else if (currentWeatherResults.visibility > 400 && currentWeatherResults.visibility <= 1000) {
                        currentVisibility = "Very poor";
                    } else if (currentWeatherResults.visibility > 1000 && currentWeatherResults.visibility <= 2000) {
                        currentVisibility = "Very poor";
                    } else if (currentWeatherResults.visibility > 2000 && currentWeatherResults.visibility <= 7000) {
                        currentVisibility = "Moderate";
                    } else if (currentWeatherResults.visibility > 7000 && currentWeatherResults.visibility <= 10000) {
                        currentVisibility = "Good";
                    } else if (currentWeatherResults.visibility > 10000 && currentWeatherResults.visibility <= 30000) {
                        currentVisibility = "Very good";
                    } else if (currentWeatherResults.visibility > 30000) {
                        currentVisibility = "Excellent";
                    } else {
                        currentVisibility = "—";
                    }

                    mainWeatherBlock.todayShortMetaHumidity.html(" " + currentWeatherResults.main.humidity + "%");
                    mainWeatherBlock.todayShortMetaVisibility.html(" " + currentVisibility);
                    mainWeatherBlock.todayShortMetaPresure.html(" " + currentWeatherResults.main.pressure + " hPa");

                    // Temperature at the moment
                    mainWeatherBlock.temperatureAtTheMoment.find('.degrees').html(Math.round(currentWeatherResults.main.temp));
                    mainWeatherBlock.temperatureAtTheMoment.find('i').html(defineIcon(currentWeatherResults.weather[0].icon));;

                    mainWeatherBlock.currentWeatherCurrentLocation.find('.location-wrapper .degrees').html(Math.round(currentWeatherResults.main.temp))
                    mainWeatherBlock.currentWeatherCurrentLocation.find('.current-location-weather-type i').html(defineIcon(currentWeatherResults.weather[0].icon));
                    mainWeatherBlock.currentWeatherCurrentLocation.find('.location-wrapper .loc').html(city + ", " + country);

                    // Check if Type is hourly
                    if (type === "hourly") {
                        mainWeatherBlock.todayExtended.find('.degrees').html(Math.round(currentWeatherResults.main.temp));
                        mainWeatherBlock.todayExtended.find('.icon').html(defineIcon(currentWeatherResults.weather[0].icon));
                    }
                }

                function displayHourlyWeather () {
                    $(hourlyWeatherResults.list).each(function (i) {
                        var obj = $(this);

                        var suffix;
                        var hours = new Date(obj[0].dt * 1000).getHours();

                        suffix = (hours >= 12)? 'pm' : 'am';
                        hours = (hours > 12)? hours -12 : hours;
                        hours = (hours == '00')? 12 : hours;

                        mainWeatherBlock.weeklyWeatherMeta.eq(i).find('.day').html(hours + suffix);
                        mainWeatherBlock.weeklyWeatherMeta.eq(i).find('.icon').html(defineIcon(obj[0].weather[0].icon));
                        mainWeatherBlock.weeklyWeatherMeta.eq(i).find('.degrees').html(Math.round(obj[0].main.temp));
                    });
                }
            };

            // Metric to Imperial Convertor
            function convertUnit (degree, type) {
                if (type == "imperial") {
                    weatherUnits = "imperial";
                    return Math.round(degree * 1.8 + 32);
                } else  {
                    weatherUnits = "metric";
                    return Math.round((degree - 32) * 5 / 9);
                }
            }

            // Change Weather Units
            function unitsConvertor (unitType) {
                var unintsToChange = $(document).find('[data-weather-degrees]');

                unintsToChange.each(function () {
                    $(this).html(convertUnit(parseInt($(this).text()), unitType));
                });
            }
            
            // Trigger Unit Convertor
            mainWeatherBlock.unitSelector.on('change', function () {
                var obj = $(this);

                if (weatherUnits !== obj.data('unit-type')) {
                    mainWeatherBlock.container.addClass('loading');
                    setTimeout(function () {                            
                        mainWeatherBlock.currentUnitType.attr('data-current-unit', obj.data('unit-type'));
                        weatherUnits = obj.data('unit-type');
                        unitsConvertor(obj.data('unit-type'));

                        // Change Plots on WorldMap
                        updateWorldMapPlots();
                    }, 750);
                    setTimeout(function () {
                        mainWeatherBlock.container.removeClass('loading');
                    }, 1000);
                }
            });

            // Multiple Locations Weather
            var geocoder, address;

            function getLocation () {
                geocoder = new google.maps.Geocoder();
                geocoder.geocode( { 'address': address}, function(results, status) {
                    if (status == google.maps.GeocoderStatus.OK) {
                        lat = results[0].geometry.location.lat();
                        lon = results[0].geometry.location.lng();

                        // Set textual location
                        city  = results[0].address_components[0].long_name;
                        country  = results[0].address_components[results[0].address_components.length - 1].short_name;

                        // Add loading overlay
                        mainWeatherBlock.container.addClass('loading');

                        // Load data
                        loadWeather("hourly");
                        setTimeout(function () {
                            mainWeatherBlock.container.removeClass('loading');
                        }, 1250);
                    } else {
                        $('.extended-weather-section .location-input').addClass('has-error');
                        $('.extended-weather-section .location-input').val("Something went wrong");
                    }
                });
            }

            // Get search location
            $('.extended-weather-section .forecast-btn').on('click', function (e) {
                e.preventDefault();
                var writtenValue = $('.extended-weather-section .location-input').val();

                if (writtenValue !== address) {
                    address = writtenValue;
                    getLocation();
                } else {
                    $('.extended-weather-section .location-input').addClass('highlight');
                }
            });

            $('.extended-weather-section .location-input').on('focus, keypress', function () {
                var obj = $(this);

                if (obj.hasClass('has-error')) {
                    obj.removeClass('has-error');
                    obj.val('');
                }
            });

            /**
            **
            * Mapel Init
            **
            **/
            var cities = [{"id": "524901"}, {"id": "2643741"},  {"id": "1850147"}, {"id": "1816670"}, {"id": "2147714"}, {"id": "6173331"}, {"id": "3435910"}, {"id": "3369157"}, {"id": "3530597"}, {"id": "360630"}, {"id": "1070940"}],
                url = "",
                worldWeatherResults,
                plots = {};

            // WP Stuff
            /*$(cities).each(function () {
                url = url + "," + $(this)[0].id;
            });
            url = url.substring(1, url.length);*/

            // Demo Stuff
            url = "524901,2643741,1850147,1816670,2147714,6173331,3435910,3369157,3530597,360630,1070940";

            // Call to API Weather
            $.ajax({
                url: 'http://api.openweathermap.org/data/2.5/group?id=' + url + '&units=metric&APPID=af60c4fdd1bca77a3d2b036828c809a9',
                dataType: 'json',
                success: function (results) {
                    worldWeatherResults = results;

                    for (var i = 0; i < cities.length; i ++) {
                        plots[results.list[i].name + '_name'] = {
                            type: 'svg',
                            path: 'M12.500,-0.000 C12.500,-0.000 27.500,-0.000 27.500,-0.000 C34.403,-0.000 40.000,5.596 40.000,12.500 C40.000,19.403 34.403,25.000 27.500,25.000 C27.500,25.000 12.500,25.000 12.500,25.000 C5.596,25.000 -0.000,19.403 -0.000,12.500 C-0.000,5.596 5.596,-0.000 12.500,-0.000 Z',
                            width: 15,
                            height: 0,
                            latitude: results.list[i].coord.lat,
                            longitude:  results.list[i].coord.lon,
                            attrs: {
                                opacity: 0
                            },
                            attrsHover: {
                                "stroke-opacity": 0,
                                "stroke-width": 0
                            },
                            text: {
                                position: 'right',
                                content: results.list[i].name,
                                attrs : {
                                    fill: '#44494b',
                                    "font-size": 9,
                                    "font-family": "'Montserrat', sans-serif"
                                },
                                attrsHover: {
                                    fill: '#44494b'
                                }
                            }                          
                        };

                        plots[results.list[i].name + '_temp'] = {
                            type: 'svg',
                            path: 'M12.500,-0.000 C12.500,-0.000 27.500,-0.000 27.500,-0.000 C34.403,-0.000 40.000,5.596 40.000,12.500 C40.000,19.403 34.403,25.000 27.500,25.000 C27.500,25.000 12.500,25.000 12.500,25.000 C5.596,25.000 -0.000,19.403 -0.000,12.500 C-0.000,5.596 5.596,-0.000 12.500,-0.000 Z',
                            width: 28,
                            height: 16,
                            latitude: results.list[i].coord.lat,
                            longitude:  results.list[i].coord.lon,
                            attrs: {
                                fill: '#ffd800'
                            },
                            attrsHover: {
                                fill: '#ffd800',
                                "stroke-opacity": 0,
                                "stroke-width": 0
                            },
                            text: {
                                position: 'inner',
                                content: Math.round(results.list[i].main.temp),
                                attrs : {
                                    fill: '#44494b',
                                    "font-size": 11,
                                    "font-family": "'Montserrat', sans-serif"
                                },
                                attrsHover: {
                                    fill: '#44494b'
                                }
                            }
                        };
                    }

                    // Init Mapael
                    $(".world-weather-map").mapael({
                        map: {
                            name: 'world_countries',
                            defaultArea: {
                                attrs : {
                                    fill : '#d7dadd',
                                    stroke: 'transparent'
                                },
                                attrsHover: {
                                    fill : '#d7dadd'
                                }
                            }
                        },

                        plots: plots
                    });
                },

                error: function (x, y, z) {
                    console.log(x, y, z);
                }
            });

            function updateWorldMapPlots () {
                var updatedOptions = {'plots' : {}};
                var newPlots;
                var deletedPlots;

                function setUnits (temp) {
                    if (weatherUnits === "metric") {
                        return temp;
                    } else if (weatherUnits === "imperial") {
                        return Math.round(temp * 9 / 5 + 32);
                    }
                }

                for (var i = 0; i < cities.length; i ++) {
                    updatedOptions.plots[worldWeatherResults.list[i].name + '_temp'] = {
                        text: {
                            content: setUnits(Math.round(worldWeatherResults.list[i].main.temp))
                        }
                    };
                }

                $(".world-weather-map").trigger('update', [updatedOptions, newPlots, deletedPlots, {animDuration: 2550}]);
            };
        },

		autoCompleteSearch: function () {
            var inputs = [];
            var drew = false;
            var ajaxResults;
            var resultsPos = [];

            // Titles
            jQuery.ajax({
				url: 'ajax/results.json',
				dataType: 'json',
				success: function (result) {
					ajaxResults = result.titles;

					$(ajaxResults).each(function(i, val){
						inputs.push(val.title);
					});
				},
				error: function (xhr, status, error) {
					console.log(xhr);
					console.log(status);
					console.log(error);
				}
			});
            
            $(".main-search-form .search-input").on("keyup", function(event){
                var query = $(".main-search-form .search-input").val();
        		
                if($(".main-search-form .search-input").val().length > 1) {
                    //Case insensitive search for our array
                    resultsPos = [];
                    var results = $.grep(inputs, function (item, i) {

                    	if (item.search(RegExp(query, "i")) != -1) {
                    		resultsPos.push(i);
                    	}
                        return item.search(RegExp(query, "i")) != -1;
                    });
                    
                    //First search
                    if (drew == false) {
                        //Prevent redrawing/binding of list
                        drew = true;
                    }
                    //Clear old results
                    else {
                        $("#search-results").empty();
                    }
                    
                    //Add results to the list
                    $(results).each(function (i, val) {
                    	var result = $("<li class='not-visible'><a href='" + ajaxResults[resultsPos[i]].url + "'>" + val + "</a></li>");
                    	$("#search-results").append(result);

                    	setTimeout(function (i) {
                    		result.removeClass('not-visible');
                    	}, ((i+1) * 120));
                    });

                    $("#search-results li").each(function (i, val) {
                    	var text = $(val).find('a').text();

                    	var newText = text.toLowerCase();
                    	var newQuery = query.toLowerCase();
                    	var pos = newText.indexOf(newQuery);

                    	var newVar = new RegExp(query, "ig");
                    	var matchingText, queryLength;

                    	if (newVar.test(newText)) {
                    		queryLength = query.length;
                    		matchingText = text.substr(pos, queryLength);
                    	}

                    	text = text.replace(new RegExp(query, "ig"), '<span>' + matchingText + '</span>');
                    	$(val).find('a').html(text);
                    });
                }

                //Handle backspace/delete so results don't remain
                else if(drew){
                    $("#search-results").empty();
                }
            });
		},

        postShare: function () {
            function getCoords(elem) {
                var box = elem.getBoundingClientRect();
                var body = document.body;
                var docEl = document.documentElement;
                var scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop;
                var scrollLeft = window.pageXOffset || docEl.scrollLeft || body.scrollLeft;
                var clientTop = docEl.clientTop || body.clientTop || 0;
                var clientLeft = docEl.clientLeft || body.clientLeft || 0;
                var top  = box.top +  scrollTop - clientTop;
                var left = box.left + scrollLeft - clientLeft;
                return {
                    top: Math.round(top), 
                    left: Math.round(left) 
                };
            }

            // Get Selection 
            function getSelected () {
                if(window.getSelection) { return window.getSelection(); }
                else if(document.getSelection) { return document.getSelection(); }
                else {
                    var selection = document.selection && document.selection.createRange();
                    if(selection.text) { return selection.text; }
                    return false;
                }
                return false;
            }

            // Clear Selection
            function clearSelection () {
                if (window.getSelection) {
                  if (window.getSelection().empty) {  // Chrome
                    window.getSelection().empty();
                  } else if (window.getSelection().removeAllRanges) {  // Firefox
                    window.getSelection().removeAllRanges();
                  }
                } else if (document.selection) {  // IE?
                  document.selection.empty();
                }
            }

            var paragraphToShare = $('.single-post-container .single-post .post-body .post-content'),
                quoteBlock = $('.quote-block'),
                quoteBlockH = quoteBlock.outerHeight(),
                quoteBlockW = quoteBlock.width(),
                quoteBlockInput = $('.quote-block .quote-text');

            paragraphToShare.on('mouseup', function () {
                var s = getSelected(),
                    text = s.toString();

                if (text.replace(/\s+/g, '')) {
                    var oRange = s.getRangeAt(0),
                        oRect = oRange.getBoundingClientRect(),
                        relDoc = getCoords(oRange);

                    quoteBlock.css({
                        'top': relDoc.top - quoteBlockH - 15,
                        'left': relDoc.left + (oRect.width / 2) - (quoteBlockW / 2)
                    });
                    quoteBlockInput.attr('value', text);
                    quoteBlock.addClass('visible');
                } else {
                    quoteBlockInput.attr('value', '');                        
                    quoteBlock.removeClass('visible');
                }
            });

            $('.page-single-story').on('mousedown', function (e) {
                clearSelection();
                if (!$(e.target).is('.quote-block .share-options .option a i')) {
                    quoteBlock.removeClass('visible');
                }
            });

            // Share function 
            var shareOption = $('.quote-block .share-options .option'),
                sharePopup = $('.share-story-text-popup');

            sharePopup.find('.close-popup').on('click', function () {
                sharePopup.removeClass('visible');
            });

            shareOption.each(function () {
                var obj = $(this),
                    link = obj.find('a');

                link.on('click', function (e) {
                    e.preventDefault();
                    quoteBlock.removeClass('visible');
                    var quoteBlockText = $('.quote-block .quote-text').val();

                    if (obj.data('option') !== 'quote') {
                        var authorName = $('.single-post').eq($('.progress-block').data('current-post-id')).find('.post-author .author').html(),
                            authorUrl = $('.single-post').eq($('.progress-block').data('current-post-id')).find('.post-author .author').attr('href');

                        sharePopup.find('.popup-header').attr('data-share-option', obj.data('option'));
                        sharePopup.find('.share-message').html('"' + quoteBlockText + '" — ' + '<a href="' + authorUrl + '">@' + authorName.replace(/\s/g, '') + '</a> <br /><br />' + '<a href="' + window.location.href + '">' + window.location.href + '</a>');

                        sharePopup.addClass('visible');
                    } else {
                        var commentsArea = $('.single-post').eq($('.progress-block').data('current-post-id')).find('.comments-area-block'),
                            commentsTextArea = commentsArea.find('textarea');

                        commentsTextArea.val('"' + quoteBlockText + '" — ').addClass('has-value');

                        commentsArea.velocity('scroll', {
                            duration: 450,
                            offset:  -$('.progress-block').height() - 45
                        });

                        teslaThemes.openCommentsArea(commentsArea, 'auto');
                    }
                });
            });
        },

        contactMap: function () {
            var mapCanvas = jQuery('#map-canvas');

            if ($('#contact-popup').length) {
                var infobox = new InfoBox({
                    content: document.getElementById('contact-popup')
                });
            }

            function initialize_contact_map () {
                var mapOptions = {
                        center: new google.maps.LatLng(38.954771,-84.275544),
                        zoom: 16,
                        scrollwheel: false,
                        disableDefaultUI: true,
                        mapTypeId: google.maps.MapTypeId.ROADMAP,
                        styles: [{ stylers: [{saturation: -100}]}]

                        /*styles: [{ stylers: [{saturation: -100}, {lightness: -30}, {gama: .85}]}]*/
                    };
                var contact_map = new google.maps.Map(mapCanvas[0],mapOptions),
                    marker = new google.maps.Marker({
                        map: contact_map,
                        position: new google.maps.LatLng(38.953876,-84.282599),
                        animation: google.maps.Animation.DROP,
                        icon: 'img/map-pin.png',
                        zIndex: 99
                    });

                google.maps.event.addListener(marker, 'click', function() {
                    $('.map-canvas-wrapper').toggleClass('open');
                    if ($('.map-canvas-wrapper').hasClass('open')) {
                        infobox.open(contact_map, this);
                        contact_map.set('styles', [{ stylers: [{saturation: -100}, {lightness: -30}, {gama: .85}]}]);
                    }
                });

                $('#contact-popup .logo').on('click', function () {
                    contact_map.set('styles', [{ stylers: [{saturation: -100}]}]);
                    infobox.close();
                });
            }
            
            if (mapCanvas.length) {
                google.maps.event.addDomListener(window, 'load', initialize_contact_map);
            }
        },

        mediumEditorInit: function () {
            // Place cursor at the start of contenteditable
            function placeCaret(el) {
                el.focus();
                if (typeof window.getSelection != "undefined"
                        && typeof document.createRange != "undefined") {
                    var range = document.createRange();
                    range.selectNodeContents(el);
                    range.collapse(true);
                    var sel = window.getSelection();
                    sel.removeAllRanges();
                    sel.addRange(range);
                } else if (typeof document.body.createTextRange != "undefined") {
                    var textRange = document.body.createTextRange();
                    textRange.moveToElementText(el);
                    textRange.collapse(true);
                    textRange.select();
                }
            }

            // Get Coords
            function getCoords(elem) {
                var box = elem.getBoundingClientRect();
                var body = document.body;
                var docEl = document.documentElement;
                var scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop;
                var scrollLeft = window.pageXOffset || docEl.scrollLeft || body.scrollLeft;
                var clientTop = docEl.clientTop || body.clientTop || 0;
                var clientLeft = docEl.clientLeft || body.clientLeft || 0;
                var top  = box.top +  scrollTop - clientTop;
                var left = box.left + scrollLeft - clientLeft;
                return {
                    top: Math.round(top), 
                    left: Math.round(left) 
                };
            }

            var tt_editor_title = $('.tt_editor #story-title'),
                tt_editor_body = $('.tt_editor #story-body'),
                publishBtn = $('.publish-form .publish-button'),
                editor = new MediumEditor(tt_editor_body, {
                    imageDragging: true,
                    placeholder: false,
                    toolbar: {
                        allowMultiParagraphSelection: false,
                        buttons: ['bold', 'italic', 'underline', 'h2', 'h3', 'quote']
                    }
                });

            /**
            ** 
            * Image Alignments  
            **
            **/

            var currentImage;
            var alignOptions = $('.image-alignments'),
                alignOption = alignOptions.find('.option');

            tt_editor_body.on('mousedown', function (e) {
                if ($(e.toElement).is('img')) {
                    $(e.toElement).addClass('image-selected');
                    currentImage = $(e.toElement);

                    var oRect = e.toElement.getBoundingClientRect(),
                        relDoc = getCoords(e.toElement);

                    alignOptions.css({
                        'top': relDoc.top - alignOptions.height() - 15,
                        'left': relDoc.left + (oRect.width / 2) - (alignOptions.width() / 2)
                    });

                    alignOptions.addClass('visible');
                } else {
                    if (currentImage) {
                        currentImage.removeClass('image-selected');
                        alignOptions.removeClass('visible');
                    }
                }
            });
            
            $('.get-published-page').on('click', function (e) {
                if (!$(e.toElement).is('img') && currentImage) {
                    currentImage.removeClass('image-selected');
                    alignOptions.removeClass('visible');
                }
            });

            alignOption.on('click', function () {
                var obj = $(this);

                currentImage.attr('data-align', obj.data('option'));
            });

            // Check if Story Title is empty on key events
            tt_editor_title.on('keydown keyup', function (e) {
                var obj = $(this),
                    lengthOfTitle = obj.html().length;

                // Prevent from deleting 'Story title'
                if (!lengthOfTitle && e.keyCode === 8) {
                    obj.html('<span class="title-placeholder">Title your story</span>');
                    return false;
                }

                if ($('.title-placeholder').length) {
                    $('.title-placeholder').remove();
                }

                if (e.keyCode === 13) {
                    e.preventDefault();
                    tt_editor_body.focus();
                }
            });

            // Check if Story Title is empty on focusout
            tt_editor_title.on('focusout', function (e) {
                var obj = $(this),
                    lengthOfTitle = obj.html().length;

                if (!lengthOfTitle) {
                    obj.html('<span class="title-placeholder">Title your story</span>');
                }
            });

            // Focus on the start of title
            tt_editor_title.on('click', function (e) {
                var obj = $(this);
                if ($('.title-placeholder').length) {
                    obj.blur();
                    placeCaret(obj[0]);
                }
            });

            // Check if Story Body is empty on key events
            tt_editor_body.on('keydown keyup', function (e) {
                var obj = $(this),
                    lengthOfTitle;

                if (obj.find('p').length == 1) {
                    lengthOfTitle = obj.find('p').html().replace('<br>', '').length;
                }

                // Prevent from deleting 'Story title'
                if (!lengthOfTitle && e.keyCode === 8 && obj.find('p').length === 1) {
                    obj.find('p').html('<span class="body-placeholder">Describe your story</span>');
                    return false;
                }

                if (e.keyCode !== 8 && $('.body-placeholder').length) {
                    $('.body-placeholder').remove();
                }
            });

            // Remove Body placeholder
            tt_editor_body.on('focus', function (e) {
                if ($('.body-placeholder').length) {
                   
                }
            });

            // Focus on the start of body 
            tt_editor_body.on('click', function (e) {
                var obj = $(this);
                if ($('.body-placeholder').length) {
                    obj.blur();
                    placeCaret(obj[0]);
                }
            });

            // On editor body focus out 
            tt_editor_body.on('focusout', function (e) {
                var obj = $(this),
                    lengthOfTitle;

                if (obj.find('p').length == 1) {
                    lengthOfTitle = obj.find('p').html().replace('<br>', '').length;
                }

                if (!$('.body-placeholder').length && !lengthOfTitle && obj.find('p').length === 1) {
                    tt_editor_body.find('p').eq(0).html('<span class="body-placeholder">Describe your story</span>');
                }
            });

            // Publish Event
            publishBtn.on('click', function (e) {
                e.preventDefault();

                $('.publish-form textarea').html($('.tt_editor').html());
            });
        },

        postProgress: function () {
            var header = $('header'),
                currentPostId = 0,
                allPosts,
                post = $('.single-post'),
                headerHeight = header.outerHeight(),
                progressBlock = $('.progress-block'),
                progressBlockPostTitle = $('.progress-block h4.post-title'),
                scrollTopBtn = $('.scroll-top-wrapper');

            $.ajax({
                url: 'ajax/infinite-scrolling-posts.json',
                dataType: 'json',
                success: function (result) {
                    allPosts = result;
                },
                error: function (xhr, status, error) {
                    console.log(xhr, status, error);
                }
            });

          

            // Check if element is in viewport
            function checkVisible (elm, evalType) {
                evalType = evalType || "visible";

                var vpH = $(window).height(), // Viewport Height
                    st = $(window).scrollTop(), // Scroll Top
                    y = $(elm).offset().top,
                    elementHeight = $(elm).height();

                if (evalType === "visible") return ((y < (vpH + st)) && (y > (st - elementHeight)));
                if (evalType === "above") return ((y < (vpH + st)));
            }

            // Progress fuctions 
            var getMax = function (i) {
                return $('.single-post').eq(i).find('.readable-post-area').outerHeight() - $(window).height() - $('.single-post').eq(i).find('h1.post-title').outerHeight(true);
            }

            var getValue = function (i) {
                return -$('.single-post')[i].getBoundingClientRect().top - $('.single-post').eq(i).find('h1.post-title').outerHeight(true);
            }

            var progressBar = $('.actual-progress'), 
                max = getMax(), 
                value, width;

            var getWidth = function(i) {
                // Calculate width in percentage
                value = getValue(i);            
                width = (value/max) * 100;
                width = Math.min(Math.max(parseInt(width), 0), 100);
                width = width + '%';
                return width;
            }

            var setWidth = function(i){
                progressBar.css({ width: getWidth(i) });
            }

            // Resize event
            $(window).on('resize', function(){
                // Need to reset the Max attr
                $('.single-post').each(function (i) {
                    if (checkVisible ($(this))) {
                        max = getMax(i);
                        setWidth(i);
                    }
                });
            });

            // Scroll event
            $(window).on('scroll', function () {
                var st = $(this).scrollTop();

                 if (st > (headerHeight + post.eq(currentPostId).find('h1.post-title').height()) && !progressBlock.hasClass('visible')) {
                    progressBlock.addClass('visible');                    
                } else if (st <= (headerHeight + post.eq(currentPostId).find('h1.post-title').height())) {
                    progressBlock.removeClass('visible');
                }

                $('.single-post').each(function (i) {
                    if (checkVisible ($(this))) {
                        max = getMax(i);
                        setWidth(i);

                        currentPostId = i;
                        progressBlock.attr('data-current-post-id', i);
                        progressBlockPostTitle.html(post.eq(i).find('h1.post-title').html());
                    }
                });

                // Load new posts 

                function loadPost () {
                    if (currentPostId < allPosts.newPosts.length) {
                        var newPost = post.last().clone();

                        newPost.find('.comments-area-wrapper').removeClass('open').hide();
                        newPost.find('.comments-area-toggle').removeClass('not-visible');

                        newPost.find('*').removeClass('has-value');

                        newPost.find('h1.post-title').html(allPosts.newPosts[currentPostId].title);
                        newPost.find('.post-cover .main-cover').html(allPosts.newPosts[currentPostId].cover)
                        newPost.find('.post-content').html(allPosts.newPosts[currentPostId].text);

                        newPost.find('.post-categories').html(function () {
                            var categories = [];
                            $(allPosts.newPosts[currentPostId].categories).each(function () {
                                categories.push("<li class='category'><a href='#'>" + $(this).selector + "</a></li>");
                            });

                            return categories;
                        });

                        newPost.insertAfter(post.eq(currentPostId)).addClass('delayed');
                        post = $('.single-post');

                        setTimeout(function () {
                            post.last().removeClass('delayed');
                        }, 450);

                        $('.comments-area-block').each(function () {
                            teslaThemes.openCommentsArea($(this), 'click');
                        });

                        teslaThemes.postShare();
                        teslaThemes.magnificPopupInit();
                    }
                }

                if ($(window).width() > 991) {
                    if (st + $('footer').height() + 100 >= $(document).height() - $(window).height()) {
                        loadPost();
                    }
                } else {
                    if (st + $('footer').height() + $('.sidebar-wrapper').height() + 100 >= $(document).height() - $(window).height()) {
                        loadPost();
                    }
                }

                // Scroll Top Button
                if (currentPostId > 0) {
                    scrollTopBtn.addClass('visible');
                } else {
                    scrollTopBtn.removeClass('visible');
                }
            });

            scrollTopBtn.find('.scroll-top-article').on('click', function () {
                post.eq(currentPostId - 1).velocity('scroll', {
                    duration: 750,
                    offset: -progressBlock.height()
                });
                currentPostId --;
            });

            scrollTopBtn.find('.scroll-top-page').on('click', function () {
                $('html').eq(0).velocity('scroll', {
                    duration: 1150,
                    offset: 0
                });
                currentPostId = 0;
            });
        
            // Share block
            progressBlock.find('.post-settings .setting.share').on('click', function () {
                $(this).toggleClass('expanded');
            });

            // Go to comments area
            progressBlock.find('.post-settings .setting.comments').on('click', function () {
                var comments = post.eq(currentPostId).find('.comments-area-block');

                comments.velocity('scroll', {
                    duration: 600,
                    offset: -progressBlock.height() - 45
                });

                if (!comments.find('.comments-area-wrapper').hasClass('open'))
                    teslaThemes.openCommentsArea(comments, 'auto');
            });

            // Comments area toggle
            $('.comments-area-block').each(function () {
                teslaThemes.openCommentsArea($(this), 'click');
            });
        },

        slickInit: function () {
            if ($('.weekly-weather-carousel').length) {
                $('.weekly-weather-carousel').slick({
                    dots: false,
                    arrows: false,
                    infinite: false,
                    slidesToShow: 6,
                    slidesToScroll: 1,
                    responsive: [
                        {
                            breakpoint: 1600,
                            settings: {
                                slidesToShow: 5
                            }
                        },
                        {
                            breakpoint: 1400,
                            settings: {
                                slidesToShow: 4
                            }
                        },
                        {
                            breakpoint: 1100,
                            settings: {
                                slidesToShow: 3
                            }
                        },
                        {
                            breakpoint: 580,
                            settings: {
                                slidesToShow: 2
                            }
                        }
                    ]
                });
            }

            if ($('.weather-block .week-temperatures').length) {
                $('.weather-block .week-temperatures').slick({
                    dots: false,
                    arrows: false,
                    infinite: false,
                    slidesToShow: 6,
                    slidesToScroll: 1,
                    responsive: [
                        {
                            breakpoint: 1200,
                            settings: {
                                slidesToShow: 4
                            }
                        },
                        {
                            breakpoint: 992,
                            settings: {
                                slidesToShow: 6
                            }
                        },
                        {
                            breakpoint: 500,
                            settings: {
                                slidesToShow: 3
                            }
                        }
                    ]
                });
            }
        },

        marqueeInit: function () {
            if ($('.marquee').length) {
                var $mq = $('.marquee').marquee({
                    speed: 7000,
                    pauseOnHover: true
                });

                $(window).on('scroll', function () {
                    var st = $(window).scrollTop();

                    if (st > $('.marquee').offset().top + $('.marquee').height()) {
                        $mq.marquee('pause');
                    } else {
                        $mq.marquee('resume');
                    }
                });
            }
        },

        theiaInit: function () {
            $('.sidebar-wrapper').theiaStickySidebar({
                additionalMarginBottom: -35
            });
        }
	};

	$(document).ready(function(){
		teslaThemes.init();

        setTimeout(function () {
            $('body').addClass('dom-ready');
        }, 250);
	});
}(jQuery));